" Hide toolbar
if has("gui_running")
  set guioptions-=T
endif

" Font and theme
set guifont=Monaco:h14
color molokai

" Ruby debugger settings
let g:ruby_debugger_progname = 'mvim'
let g:ruby_debugger_cucumber_path = "./bundler_stubs/cucumber"
let g:ruby_debugger_spec_path = "./bundler_stubs/rspec"

let ruby_fold=1
set foldlevelstart=99

command! FR set filetype=ruby

" Key mappings
nmap <d-r> <Esc>:NERDTreeFind<CR>

" Leader mappings
nmap <Leader>vi :tabe ~/.vimrc.after<CR>

" Enable folding CoffeeScript
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" Prevent Vroom from using colors
let g:vroom_use_colors = 0

" Include local vim outliner config
if filereadable(expand("~/.vimoutlinerrc"))
  source ~/.vimoutlinerrc
endif

" Tabularize
if exists(":Tabularize")
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Open URI on current line

ruby << EOF
  class Object; def flush; end; end
  def open_uri
    re = %r{(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))}

    line = VIM::Buffer.current.line

    if url = line[re, 1]
      system("open", url)
      VIM::message(url)
    else
      VIM::message("No URI found in line.")
    end
  end
EOF

if !exists("*OpenURI")
  function! OpenURI()
    :ruby open_uri
  endfunction
endif
map <Leader>w :call OpenURI()<CR>

" Automatically reload vimrc on save
function! UpdateVimRC()
     for server in split(serverlist())
         call remote_send(server, '<Esc>:source $HOME/.vimrc.after<CR>')
     endfor
 endfunction
 augroup myvimrchooks
 au!
    autocmd bufwritepost .vimrc.after call UpdateVimRC()
 augroup END
